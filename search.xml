<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MATLAB程序流程控制语句</title>
      <link href="/2021/11/09/matlab/%E5%9B%9B%E3%80%81MATLAB%E7%A8%8B%E5%BA%8F%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/"/>
      <url>/2021/11/09/matlab/%E5%9B%9B%E3%80%81MATLAB%E7%A8%8B%E5%BA%8F%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="四、MATLAB程序流程控制语句"><a href="#四、MATLAB程序流程控制语句" class="headerlink" title="四、MATLAB程序流程控制语句"></a>四、MATLAB程序流程控制语句</h2><blockquote><p><strong>声明：</strong><br>笔记是学习慕课网《科学计算与MATLAB语言》课程和刘卫国主编的《MATLAB程序设计与应用（第3版）》后的个人总结，方便自己以后巩固和复习！</p></blockquote><h3 id="4-1-M文件"><a href="#4-1-M文件" class="headerlink" title="4.1  M文件"></a>4.1  M文件</h3><h4 id="4-1-1-M文件的建立与打开"><a href="#4-1-1-M文件的建立与打开" class="headerlink" title="4.1.1  M文件的建立与打开"></a>4.1.1  M文件的建立与打开</h4><p>M文件是一个文本文件，它可以用任何编辑程序来建立和编辑，而一般常用且最为方便的是使用MATLAB提供的文本编辑器。</p><h5 id="1．建立新的M文件"><a href="#1．建立新的M文件" class="headerlink" title="1．建立新的M文件"></a>1．建立新的M文件</h5><p>为建立新的M文件，启动MATLAB编辑器有3种方法。<br>① 在MATLAB主窗口选择“主页”选项卡，在“文件”命令组中单击“新建脚本”命令按钮。</p><p><img src="https://gitee.com/peng_xiang_li/Blogimage/raw/master/Matlab4/20211109182936.png"></p><p>② 在MATLAB命令行窗口输入命令：<br>edit 文件名<br>启动MATLAB编辑器后，输入M文件的内容并存盘。<br>③ 在命令历史窗口选中一些命令（按住Ctrl可同时选择多条命令），然后从右键快捷菜单中选择“创建脚本”命令，将会启动MATLAB编辑器，并在编辑区中加入所选中的命令。</p><h5 id="2．打开已有的M文件"><a href="#2．打开已有的M文件" class="headerlink" title="2．打开已有的M文件"></a>2．打开已有的M文件</h5><p>打开已有的M文件，也有3种方法：<br>    (1) 菜单操作。在MATLAB主窗口选择“主页”选项卡，在“文件”命令组中单击“打开”命令按钮，再从弹出的下拉菜单中选择“打开”命令，从“打开”对话框中选择所需打开的M文件。</p><p><img src="https://gitee.com/peng_xiang_li/Blogimage/raw/master/Matlab4/20211109182952.png">    (2) 命令操作。在MATLAB命令窗口输入命令：edit 文件名，则打开指定的M文件。<br>    (3) 命令按钮操作。单击MATLAB主窗口工具栏上的Open File命令按钮，再从弹出的对话框中选择所需打开的M文件。</p><h4 id="4-1-2-M文件的分类"><a href="#4-1-2-M文件的分类" class="headerlink" title="4.1.2  M文件的分类"></a>4.1.2  M文件的分类</h4><p>   用MATLAB语言编写的程序，称为M文件。M文件可以根据调用方式的不同分为两类：脚本文件(Script File)和函数文件(Function File)。</p><blockquote><p><strong>脚本文件和函数文件的主要区别如下：</strong><br>① 脚本文件没有输入参数，也不返回输出参数，而函数文件可以带输入参数，也可返回输出参数。<br>② 脚本文件对MATLAB工作空间中的变量进行操作，文件中所有命令的执行结果也完全返回到工作空间中，而函数文件中定义的变量为局部变量，当函数文件执行完毕时，这些变量被清除。<br>③ 脚本文件可以直接运行，在MATLAB命令行窗口输入脚本文件的名字，就会顺序执行脚本文件中的命令，而函数文件不能直接运行，而要以函数调用的方式来调用它。</p></blockquote><p>建立一个命令文件将变量a,b的值互换，然后运行该命令文件。<br>    程序1：<br>首先建立命令文件并以文件名exch.m存盘：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">clear;</span><br><span class="line">a=<span class="number">1</span>:<span class="number">10</span>;</span><br><span class="line">b=[<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>;<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>];</span><br><span class="line">c=a;a=b;b=c;</span><br><span class="line">a</span><br><span class="line">b</span><br></pre></td></tr></table></figure><p>然后在MATLAB的命令窗口中输入exch，将会执行该命令文件。 </p><h3 id="4-2-程序控制结构"><a href="#4-2-程序控制结构" class="headerlink" title="4.2  程序控制结构"></a>4.2  程序控制结构</h3><h4 id="4-2-1-顺序结构"><a href="#4-2-1-顺序结构" class="headerlink" title="4.2.1  顺序结构"></a>4.2.1  顺序结构</h4><h5 id="1．数据的输入"><a href="#1．数据的输入" class="headerlink" title="1．数据的输入"></a>1．数据的输入</h5><p>从键盘输入数据，则可以使用input函数来进行，该函数的调用格式为：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A=input(提示信息，选项)；</span><br></pre></td></tr></table></figure><p>其中提示信息为一个字符串，用于提示用户输入什么样的数据。<br>    如果在input函数调用时采用’s’选项，则允许用户输入一个字符串。例如：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xm=input(<span class="string">&#x27;What&#x27;&#x27;s your name?&#x27;</span>,<span class="string">&#x27;s&#x27;</span>);</span><br></pre></td></tr></table></figure><h5 id="2．数据的输出"><a href="#2．数据的输出" class="headerlink" title="2．数据的输出"></a>2．数据的输出</h5><p>​    MATLAB提供的命令窗口输出函数主要有disp函数，其调用格式为<br>​    disp(输出项)<br>其中输出项既可以为字符串，也可以为矩阵。</p><p>例4-2  求一元二次方程ax2 +bx+c=0的根。<br>程序如下：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a=input(<span class="string">&#x27;a=&#x27;</span>);</span><br><span class="line">b=input(<span class="string">&#x27;b=&#x27;</span>);</span><br><span class="line">c=input(<span class="string">&#x27;c=&#x27;</span>);</span><br><span class="line">d=b*b<span class="number">-4</span>*a*c;</span><br><span class="line">x=[(-b+<span class="built_in">sqrt</span>(d))/(<span class="number">2</span>*a),(-b-<span class="built_in">sqrt</span>(d))/(<span class="number">2</span>*a)];</span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;x1=&#x27;</span>,num2str(x(<span class="number">1</span>)),<span class="string">&#x27;,x2=&#x27;</span>,num2str(x(<span class="number">2</span>))]);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/peng_xiang_li/Blogimage/raw/master/Matlab4/20211109183009.png"></p><h5 id="3．程序的暂停"><a href="#3．程序的暂停" class="headerlink" title="3．程序的暂停"></a>3．程序的暂停</h5><p>​    暂停程序的执行可以使用pause函数，其调用格式为：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pause(延迟秒数)</span><br></pre></td></tr></table></figure><p>​    如果省略延迟时间，直接使用pause，则将暂停程序，直到用户按任一键后程序继续执行。<br>​    若要强行中止程序的运行可使用Ctrl+C命令。</p><h4 id="4-2-2-选择结构"><a href="#4-2-2-选择结构" class="headerlink" title="4.2.2  选择结构"></a>4.2.2  选择结构</h4><h5 id="1．if语句"><a href="#1．if语句" class="headerlink" title="1．if语句"></a>1．if语句</h5><p>​    在MATLAB中，if语句有3种格式。<br>​    (1) 单分支if语句：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>  条件</span><br><span class="line">语句组</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>当条件成立时，则执行语句组，执行完之后继续执行if语句的后继语句，若条件不成立，则直接执行if语句的后继语句。</p><p>  (2) 双分支if语句：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>  条件</span><br><span class="line">    语句组<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">     语句组<span class="number">2</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>​    当条件成立时，执行语句组1，否则执行语句组2，语句组1或语句组2执行后，再执行if语句的后继语句。</p><p>计算分段函数。</p><img src="https://gitee.com/peng_xiang_li/Blogimage/raw/master/Matlab4/20211109183017.png" style="zoom:33%;" /><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x=input(<span class="string">&#x27;请输入x的值:&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> x==<span class="number">10</span></span><br><span class="line">     y=<span class="built_in">cos</span>(x+<span class="number">1</span>)+<span class="built_in">sqrt</span>(x*x+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">     y=x*<span class="built_in">sqrt</span>(x+<span class="built_in">sqrt</span>(x));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">y</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/peng_xiang_li/Blogimage/raw/master/Matlab4/20211109183023.png"></p><h5 id="3-多分支if语句："><a href="#3-多分支if语句：" class="headerlink" title="(3) 多分支if语句："></a>(3) 多分支if语句：</h5><p><img src="https://gitee.com/peng_xiang_li/Blogimage/raw/master/Matlab4/20211109183033.png"></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>  条件<span class="number">1</span></span><br><span class="line">    语句组<span class="number">1</span></span><br><span class="line"><span class="keyword">elseif</span>  条件<span class="number">2</span></span><br><span class="line">    语句组<span class="number">2</span></span><br><span class="line">   ……</span><br><span class="line"><span class="keyword">elseif</span>  条件m</span><br><span class="line">     语句组m</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">     语句组n</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>例：输入一个字符，若为大写字母，则输出其对应的小写字母；若为小写字母，则输出其对应的大写字母；若为数字字符则输出其对应的数值，若为其他字符则原样输出。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">c=input(<span class="string">&#x27;请输入一个字符&#x27;</span>,<span class="string">&#x27;s&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> c&gt;=<span class="string">&#x27;A&#x27;</span> &amp; c&lt;=<span class="string">&#x27;Z&#x27;</span></span><br><span class="line">   <span class="built_in">disp</span>(setstr(<span class="built_in">abs</span>(c)+<span class="built_in">abs</span>(<span class="string">&#x27;a&#x27;</span>)-<span class="built_in">abs</span>(<span class="string">&#x27;A&#x27;</span>)));</span><br><span class="line"><span class="keyword">elseif</span> c&gt;=<span class="string">&#x27;a&#x27;</span>&amp; c&lt;=<span class="string">&#x27;z&#x27;</span></span><br><span class="line">    <span class="built_in">disp</span>(setstr(<span class="built_in">abs</span>(c)- <span class="built_in">abs</span>(<span class="string">&#x27;a&#x27;</span>)+<span class="built_in">abs</span>(<span class="string">&#x27;A&#x27;</span>)));</span><br><span class="line"><span class="keyword">elseif</span> c&gt;=<span class="string">&#x27;0&#x27;</span>&amp; c&lt;=<span class="string">&#x27;9&#x27;</span></span><br><span class="line">    <span class="built_in">disp</span>(<span class="built_in">abs</span>(c)-<span class="built_in">abs</span>(<span class="string">&#x27;0&#x27;</span>));</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">disp</span>(c);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h5 id="2．switch语句"><a href="#2．switch语句" class="headerlink" title="2．switch语句"></a>2．switch语句</h5><p>​    switch语句根据表达式的取值不同，分别执行不同的语句，其语句格式为：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>  表达式</span><br><span class="line">   <span class="keyword">case</span>  表达式<span class="number">1</span></span><br><span class="line">      语句组<span class="number">1</span></span><br><span class="line">   <span class="keyword">case</span>  表达式<span class="number">2</span></span><br><span class="line">      语句组<span class="number">2</span></span><br><span class="line">      ……</span><br><span class="line">   <span class="keyword">case</span>  表达式m</span><br><span class="line">      语句组m</span><br><span class="line">   <span class="keyword">otherwise</span></span><br><span class="line">      语句组n</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><img src="https://gitee.com/peng_xiang_li/Blogimage/raw/master/Matlab4/20211109183040.png" style="zoom:80%;" /><blockquote><p>当表达式的值等于表达式1的值时，执行语句组1，当表达式的值等于表达式2的值时，执行语句组2，…，当表达式的值等于表达式m的值时，执行语句组m，当表达式的值不等于case所列的表达式的值时，执行语句组n。当任意一个分支的语句执行完后，直接执行switch语句的下一句</p></blockquote><p>例：某商场对顾客所购买的商品实行打折销售，标准如下(商品价格用price来表示)：<br>    price&lt;200           没有折扣<br>    200≤price&lt;500      3%折扣<br>    500≤price&lt;1000     5%折扣<br>    1000≤price&lt;2500    8%折扣<br>    2500≤price&lt;5000    10%折扣<br>    5000≤price         14%折扣<br>输入所售商品的价格，求其实际销售价格。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">price=input(<span class="string">&#x27;请输入商品价格&#x27;</span>);</span><br><span class="line"><span class="keyword">switch</span> <span class="built_in">fix</span>(price/<span class="number">100</span>) </span><br><span class="line">   <span class="keyword">case</span> &#123;<span class="number">0</span>,<span class="number">1</span>&#125;             <span class="comment">%价格小于200</span></span><br><span class="line">      rate=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">case</span> &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;            <span class="comment">%价格大于等于200但小于500</span></span><br><span class="line">      rate=<span class="number">3</span>/<span class="number">100</span>;</span><br><span class="line">   <span class="keyword">case</span> <span class="built_in">num2cell</span>(<span class="number">5</span>:<span class="number">9</span>)       <span class="comment">%价格大于等于500但小于1000</span></span><br><span class="line">      rate=<span class="number">5</span>/<span class="number">100</span>;</span><br><span class="line">   <span class="keyword">case</span> <span class="built_in">num2cell</span>(<span class="number">10</span>:<span class="number">24</span>)     <span class="comment">%价格大于等于1000但小于2500</span></span><br><span class="line">      rate=<span class="number">8</span>/<span class="number">100</span>;</span><br><span class="line">   <span class="keyword">case</span> <span class="built_in">num2cell</span>(<span class="number">25</span>:<span class="number">49</span>)     <span class="comment">%价格大于等于2500但小于5000</span></span><br><span class="line">      rate=<span class="number">10</span>/<span class="number">100</span>;</span><br><span class="line">   <span class="keyword">otherwise</span>               <span class="comment">%价格大于等于5000</span></span><br><span class="line">      rate=<span class="number">14</span>/<span class="number">100</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">price=price*(<span class="number">1</span>-rate)              <span class="comment">%输出商品实际销售价格</span></span><br></pre></td></tr></table></figure><h5 id="3．try语句"><a href="#3．try语句" class="headerlink" title="3．try语句"></a>3．try语句</h5><p>语句格式为：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">   语句组<span class="number">1</span></span><br><span class="line"><span class="keyword">catch</span></span><br><span class="line">   语句组<span class="number">2</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>try语句先试探性执行语句组1，如果语句组1在执行过程中出现错误，则将错误信息赋给保留的lasterr变量，并转去执行语句组2。</p><h4 id="4-2-3-循环结构"><a href="#4-2-3-循环结构" class="headerlink" title="4.2.3  循环结构"></a>4.2.3  循环结构</h4><h5 id="1．for语句"><a href="#1．for语句" class="headerlink" title="1．for语句"></a>1．for语句</h5><p>for语句的格式为：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 循环变量=表达式<span class="number">1</span>:表达式<span class="number">2</span>:表达式<span class="number">3</span></span><br><span class="line">        循环体语句</span><br><span class="line">    <span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>其中，“表达式1:表达式2:表达式3”是一个冒号表达式，将产生一个行向量，3个表达式分别代表初值、步长和终值。步长为1时，表达式2可以省略。</p><img src="https://gitee.com/peng_xiang_li/Blogimage/raw/master/Matlab4/20211109183048.png" style="zoom:80%;" /><p>例：  一个三位整数各位数字的立方和等于该数本身则称该数为水仙花数。输出全部水仙花数。<br>程序如下：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> m=<span class="number">100</span>:<span class="number">999</span></span><br><span class="line">m1=<span class="built_in">fix</span>(m/<span class="number">100</span>);           <span class="comment">%求m的百位数字</span></span><br><span class="line">m2=<span class="built_in">rem</span>(<span class="built_in">fix</span>(m/<span class="number">10</span>),<span class="number">10</span>);   <span class="comment">%求m的十位数字</span></span><br><span class="line">m3=<span class="built_in">rem</span>(m,<span class="number">10</span>);             <span class="comment">%求m的个位数字</span></span><br><span class="line"><span class="keyword">if</span> m==m1*m1*m1+m2*m2*m2+m3*m3*m3</span><br><span class="line"><span class="built_in">disp</span>(m)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>or语句更一般的格式为：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 循环变量=矩阵表达式</span><br><span class="line">       循环体语句</span><br><span class="line">    <span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>​    执行过程是依次将矩阵的各列元素赋给循环变量，然后执行循环体语句，直至各列元素处理完毕。</p><h5 id="2．while语句"><a href="#2．while语句" class="headerlink" title="2．while语句"></a>2．while语句</h5><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>语句的一般格式为：</span><br><span class="line"><span class="keyword">while</span> (条件)</span><br><span class="line">     循环体语句</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>​    其执行过程为：若条件成立，则执行循环体语句，执行后再判断条件是否成立，如果不成立则跳出循环。</p><h5 id="3．break语句和continue语句"><a href="#3．break语句和continue语句" class="headerlink" title="3．break语句和continue语句"></a>3．break语句和continue语句</h5><p>​    与循环结构相关的语句还有break语句和continue语句。它们一般与if语句配合使用。<br>​    break语句用于终止循环的执行。当在循环体内执行到该语句时，程序将跳出循环，继续执行循环语句的下一语句。<br>​    continue语句控制跳过循环体中的某些语句。当在循环体内执行到该语句时，程序将跳过循环体中所有剩下的语句，继续下一次循环。</p><h5 id="4．循环的嵌套"><a href="#4．循环的嵌套" class="headerlink" title="4．循环的嵌套"></a>4．循环的嵌套</h5><p>​    如果一个循环结构的循环体又包括一个循环结构，就称为循环的嵌套，或称为多重循环结构。<br>例：  若一个数等于它的各个真因子之和，则称该数为完数，如6=1+2+3，所以6是完数。求[1,500]之间的全部完数。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> m=<span class="number">1</span>:<span class="number">500</span></span><br><span class="line">s=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> k=<span class="number">1</span>:m/<span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">rem</span>(m,k)==<span class="number">0</span></span><br><span class="line">s=s+k;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">if</span> m==s</span><br><span class="line">    <span class="built_in">disp</span>(m);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="4-3-函数文件"><a href="#4-3-函数文件" class="headerlink" title="4.3 函数文件"></a>4.3 函数文件</h3><h5 id="4-3-1-函数文件的基本结构"><a href="#4-3-1-函数文件的基本结构" class="headerlink" title="4.3.1  函数文件的基本结构"></a>4.3.1  函数文件的基本结构</h5><p>​    函数文件由function语句引导，其基本结构为：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 输出形参表=函数名<span class="params">(输入形参表)</span></span></span><br><span class="line">    注释说明部分</span><br><span class="line">    函数体语句</span><br></pre></td></tr></table></figure><p>其中以function开头的一行为引导行，表示该M文件是一个函数文件。函数名的命名规则与变量名相同。输入形参为函数的输入参数，输出形参为函数的输出参数。当输出形参多于一个时，则应该用方括号括起来。</p><h5 id="4-3-2-函数调用"><a href="#4-3-2-函数调用" class="headerlink" title="4.3.2  函数调用"></a>4.3.2  函数调用</h5><p>1.函数调用的一般格式是：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[输出实参表]=函数名(输入实参表)</span><br></pre></td></tr></table></figure><p>​    要注意的是，函数调用时各实参出现的顺序、个数，应与函数定义时形参的顺序、个数一致，否则会出错。函数调用时，先将实参传递给相应的形参，从而实现参数传递，然后再执行函数的功能。</p><p>2．函数的递归调用<br>在MATLAB中，函数可以嵌套调用，即一个函数可以调用别的函数，甚至调用它自身。一个函数调用它自身称为函数的递归调用。</p><p>例： 利用函数的递归调用，求n！。<br>    n!本身就是以递归的形式定义的：<br>   显然，求n!需要求(n-1)!，这时可采用递归调用。递归调用函数文件</p><p>factor.m如下：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>=<span class="title">factor</span><span class="params">(n)</span></span></span><br><span class="line"><span class="keyword">if</span> n&lt;=<span class="number">1</span></span><br><span class="line">   f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   f=<span class="built_in">factor</span>(n<span class="number">-1</span>)*n;    <span class="comment">%递归调用求(n-1)!</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h5 id="4-3-3-函数参数的可调性"><a href="#4-3-3-函数参数的可调性" class="headerlink" title="4.3.3  函数参数的可调性"></a>4.3.3  函数参数的可调性</h5><p>​    在调用函数时，MATLAB用两个<strong>永久变量nargin和nargout</strong>分别记录调用该函数时的输入实参和输出实参的个数。只要在函数文件中包含这两个变量，就可以准确地知道该函数文件被调用时的输入输出参数个数，从而决定函数如何进行处理。</p><blockquote><p>注意：</p><p>for k = [1,2,3,4]与 for k = [1;2;3;4]执行的次数不一样，第一个执行4次，第二只执行1次。</p></blockquote><h5 id="4-3-4-全局变量与局部变量"><a href="#4-3-4-全局变量与局部变量" class="headerlink" title="4.3.4  全局变量与局部变量"></a>4.3.4  全局变量与局部变量</h5><p>函数文件中的变量是局部的，即在一个函数文件中定义的变量不能被另一个函数文件引用。如果在若干函数中都把某一变量定义为全局变量，那么这些函数将共用这个变量，作用域是整个工作空间，即全程有效。<br>全局变量用global命令定义，格式为：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">global</span> 变量名</span><br></pre></td></tr></table></figure><h3 id="4-4特殊形式的函数"><a href="#4-4特殊形式的函数" class="headerlink" title="4.4特殊形式的函数"></a>4.4特殊形式的函数</h3><h4 id="4-3-1、子函数"><a href="#4-3-1、子函数" class="headerlink" title="4.3.1、子函数"></a>4.3.1、子函数</h4><p>在MATLAB中，可以在一个M文件中同时定义多个函数，其中M文件中出现的第一个函数称为主函数（primary function），其他函数称为子函数（subfunction），但需要注意的是子函数只能由同一M文件中的函数调用。在保存M文件时，M文件名一般和主函数名相同，外部程序只能对主函数进行调用。</p><h4 id="2-内联函数"><a href="#2-内联函数" class="headerlink" title="2. 内联函数"></a>2. 内联函数</h4><p>以字符串形式存在的函数表达式可以通过inline函数转化成内联函数。例如a=’(x+y)^2’，可以通过f=inline(a)生成内联函数f(x,y)=(x+y)^2。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; a=<span class="string">&#x27;(x+y)^2&#x27;</span>;</span><br><span class="line">f=inline(a)</span><br><span class="line">f =</span><br><span class="line">     内联函数:</span><br><span class="line">     f(x,y) = (x+y)^<span class="number">2</span></span><br><span class="line">f(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line">    <span class="number">49</span></span><br></pre></td></tr></table></figure><h4 id="3-匿名函数"><a href="#3-匿名函数" class="headerlink" title="3. 匿名函数"></a>3. 匿名函数</h4><p>匿名函数的基本格式如下：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">匿名函数名=@(输入参数) 匿名函数表达式</span><br></pre></td></tr></table></figure><p>其中，匿名函数的输入参数可以是一个，也可以是多个，有多个参数时，参数间用逗号分隔。例如：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; f=@(x,y) x^<span class="number">2</span>+y^<span class="number">2</span>;</span><br><span class="line">f(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line">    <span class="number">25</span></span><br></pre></td></tr></table></figure><h3 id="4-5程序调试与优化"><a href="#4-5程序调试与优化" class="headerlink" title="4.5程序调试与优化"></a>4.5程序调试与优化</h3><h4 id="4-5-1-程序调试方法"><a href="#4-5-1-程序调试方法" class="headerlink" title="4.5.1  程序调试方法"></a>4.5.1  程序调试方法</h4><p>一般来说，应用程序的错误有两类，一类是语法错误，另一类是运行时的错误。语法错误包括词法或文法的错误，例如函数名的拼写错、表达式书写错等。</p><h5 id="程序优化"><a href="#程序优化" class="headerlink" title="程序优化"></a>程序优化</h5><p>（1）采用向量化运算<br>在实际MATLAB程序设计中，为了提高程序的执行速度，常用向量或矩阵运算来代替循环操作。<br>（2）预分配内存空间<br>通过在循环之前预分配向量或数组的内存空间可以提高for循环的处理速度。<br>（3）减小运算强度<br>在实现有关运算时，尽量采用运算量更小的运算，从而提高运算速度。一般来说，乘法比乘方运算快，加法比乘法运算快。</p>]]></content>
      
      
      <categories>
          
          <category> MATLAB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MATLAB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MATLAB数据及其运算</title>
      <link href="/2021/11/09/matlab/%E4%BA%8C%E3%80%81MATLAB%E6%95%B0%E6%8D%AE%E5%8F%8A%E5%85%B6%E8%BF%90%E7%AE%97/"/>
      <url>/2021/11/09/matlab/%E4%BA%8C%E3%80%81MATLAB%E6%95%B0%E6%8D%AE%E5%8F%8A%E5%85%B6%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<h2 id="二、MATLAB数据及其运算"><a href="#二、MATLAB数据及其运算" class="headerlink" title="二、MATLAB数据及其运算"></a>二、MATLAB数据及其运算</h2><blockquote><p><strong>声明：</strong><br>笔记是学习慕课网《科学计算与MATLAB语言》课程和刘卫国主编的《MATLAB程序设计与应用（第3版）》后的个人总结，方便自己以后巩固和复习！</p></blockquote><h3 id="2-1-Matlab数值数据"><a href="#2-1-Matlab数值数据" class="headerlink" title="2.1  Matlab数值数据"></a>2.1  Matlab数值数据</h3><h4 id="2-1-1-数值数据类型的分类"><a href="#2-1-1-数值数据类型的分类" class="headerlink" title="2.1.1  数值数据类型的分类"></a>2.1.1  数值数据类型的分类</h4><h5 id="1．整型"><a href="#1．整型" class="headerlink" title="1．整型"></a>1．整型</h5><p>整型数据是不带小数的数，分为有带符号整数和无符号整数。</p><p><img src="https://gitee.com/peng_xiang_li/Blogimage/raw/master/Matlab2/0.png"></p><h5 id="2．浮点型"><a href="#2．浮点型" class="headerlink" title="2．浮点型"></a>2．浮点型</h5><p>浮点型数据有单精度（single）和双精度（double）之分，单精度型实数在内存中占用4个字节，双精度型实数在内存中占用8个字节，双精度型的数据精度更高。</p><p>在Matlab中，数据默认为双精度型。</p><blockquote><p>single函数 可以将其他类型的数据转换为单精度型；利用class可以得到参数的数据类型。</p><p>double函数 可以将其他类型的数据转换为双精度型。</p></blockquote><p><img src="https://gitee.com/peng_xiang_li/Blogimage/raw/master/Matlab2/1.png"></p><h5 id="3．复型"><a href="#3．复型" class="headerlink" title="3．复型"></a>3．复型</h5><p>复型数据包括实部和虚部两个部分，实部和虚部默认为双精度型。</p><p>在MATLAB中，虚数单位用i或j表示。</p><blockquote><p>例如，6+5i与6+5j表示的是同一个复数，也可以写成6+5<em>i或6+5</em>j，这里将i或j看作一个运算量参与表达式的运算。</p></blockquote><h4 id="2-1-2-数据的输出格式"><a href="#2-1-2-数据的输出格式" class="headerlink" title="2.1.2  数据的输出格式"></a>2.1.2  数据的输出格式</h4><p>MATLAB用十进制数表示一个常数，具体可采用日常记数法和科学记数法两种表示方法。</p><p>format命令的格式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">format 格式符  </span><br></pre></td></tr></table></figure><p>其中，格式符决定数据的输出格式，各种格式符及其含义如表所示。</p><table><thead><tr><th><strong>格式符</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td><strong>short</strong></td><td><strong>输出小数点后4位，最多不超过7位有效数字。对于大于1000的实数，用5位有效数字的科学记数形式输出</strong></td></tr><tr><td><strong>long</strong></td><td><strong>15位有效数字形式输出</strong></td></tr><tr><td><strong>short e</strong></td><td><strong>5位有效数字的科学记数形式输出</strong></td></tr><tr><td><strong>long e</strong></td><td><strong>15位有效数字的科学记数形式输出</strong></td></tr><tr><td><strong>short g</strong></td><td><strong>从short和short e中自动选择最佳输出方式</strong></td></tr><tr><td><strong>long g</strong></td><td><strong>从long和long e中自动选择最佳输出方式</strong></td></tr><tr><td><strong>rat</strong></td><td><strong>近似有理数表示</strong></td></tr><tr><td><strong>hex</strong></td><td><strong>十六进制表示</strong></td></tr><tr><td><strong>+</strong></td><td><strong>正数、负数、零分别用+、-、空格表示</strong></td></tr><tr><td><strong>bank</strong></td><td><strong>银行格式，用元、角、分表示</strong></td></tr><tr><td><strong>compact</strong></td><td><strong>输出变量之间没有空行</strong></td></tr><tr><td><strong>loose</strong></td><td><strong>输出变量之间有空行</strong></td></tr></tbody></table><blockquote><p><strong>注意：format命令只影响数据输出格式，而不影响数据的计算和存储。</strong></p></blockquote><h3 id="2-2-MATLAB矩阵的表示"><a href="#2-2-MATLAB矩阵的表示" class="headerlink" title="2.2 MATLAB矩阵的表示"></a>2.2 MATLAB矩阵的表示</h3><h4 id="2-2-1-矩阵的建立"><a href="#2-2-1-矩阵的建立" class="headerlink" title="2.2.1  矩阵的建立"></a>2.2.1  矩阵的建立</h4><p>1．直接输入法:</p><p>最简单的建立矩阵的方法是从键盘直接输入矩阵的元素。</p><p>具体方法如下：将矩阵的元素用方括号括起来，按矩阵行的顺序输入各元素，同一行的各元素之间用空格或逗号分隔，不同行的元素之间用分号分隔。</p><p><img src="https://gitee.com/peng_xiang_li/Blogimage/raw/master/Matlab2/2.png"></p><h4 id="2-2-2-冒号表达式"><a href="#2-2-2-冒号表达式" class="headerlink" title="2.2.2   冒号表达式"></a>2.2.2   冒号表达式</h4><p>冒号表达式可以产生一个行向量，</p><p>一般格式是： </p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e1:e2:e3</span><br></pre></td></tr></table></figure><p>其中e1为初始值，e2为步长，e3为终止值。</p><p><img src="https://gitee.com/peng_xiang_li/Blogimage/raw/master/Matlab2/3.png"></p><p>初始值:4 步长:3 终止值:12。</p><p>在MATLAB中，还可以用linspace函数产生行向量。</p><p>其调用格式为：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">linspace</span>(a,b,n)</span><br></pre></td></tr></table></figure><p>其中a和b是生成向量的第一个和最后一个元素，n是元素总数。</p><blockquote><p>显然，linspace(a,b,n)与a:(b-a)/(n-1):b等价</p></blockquote><p><img src="https://gitee.com/peng_xiang_li/Blogimage/raw/master/Matlab2/4.png"></p><h4 id="2-2-3-矩阵的引用"><a href="#2-2-3-矩阵的引用" class="headerlink" title="2.2.3  矩阵的引用"></a>2.2.3  矩阵的引用</h4><h5 id="1．矩阵元素的引用方式"><a href="#1．矩阵元素的引用方式" class="headerlink" title="1．矩阵元素的引用方式"></a>1．矩阵元素的引用方式</h5><p>MATLAB通过下标引用矩阵的元素</p><blockquote><p>例如：A(3,2)=200</p></blockquote><p>也可以采用矩阵元素的序号来引用矩阵元素。矩阵元素的序号就是相应元素在内存中的排列顺序。</p><p>在MATLAB中，矩阵元素按列存储，先第一列，再第二列，依次类推。<br> 显然，序号(Index)与下标(Subscript )是一一对应的，以m×n矩阵A为例，矩阵元素A(i,j)的序号为(j-1)*m+i。其相互转换关系也可利用sub2ind和ind2sub函数求得。</p><p><img src="https://gitee.com/peng_xiang_li/Blogimage/raw/master/Matlab2/5.png"></p><h5 id="2-利用冒号表达式获得子矩阵"><a href="#2-利用冒号表达式获得子矩阵" class="headerlink" title="2.利用冒号表达式获得子矩阵"></a>2.利用冒号表达式获得子矩阵</h5><p>① A(:,j)表示取A矩阵的第j列全部元素；A(i,:)表示A矩阵第i行的全部元素；A(i,j)表示取A矩阵第i行、第j列的元素。</p><p>② A(i:i+m,:)表示取A矩阵第i～i+m行的全部元素；A(:,k:k+m)表示取A矩阵第k～k+m列的全部元素，A(i:i+m,k:k+m)表示取A矩阵第i～i+m行内，并在第k～k+m列中的所有元素。 ③A(:)将矩阵A每一列元素堆叠起来，成为一个列向量，而这也是MATLAB变量的内部储存方式。</p><h5 id="3-利用空矩阵删除矩阵的元素"><a href="#3-利用空矩阵删除矩阵的元素" class="headerlink" title="3.利用空矩阵删除矩阵的元素"></a>3.利用空矩阵删除矩阵的元素</h5><p>在MATLAB中，定义[]为空矩阵。给变量X赋空矩阵的语句为</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X=[]</span><br></pre></td></tr></table></figure><p>注意，X=[]与clear X不同，clear是将X从工作空间中删除，而空矩阵则存在于工作空间中，只是维数为0。</p><h5 id="4．改变矩阵的形状"><a href="#4．改变矩阵的形状" class="headerlink" title="4．改变矩阵的形状"></a>4．改变矩阵的形状</h5><p>reshape(A,m,n)函数在矩阵总元素保持不变的前提下，将矩阵A重新排成m×n的二维矩阵。</p><p>例如：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x=[<span class="number">23</span>,<span class="number">45</span>,<span class="number">65</span>,<span class="number">34</span>,<span class="number">65</span>,<span class="number">34</span>,<span class="number">98</span>,<span class="number">45</span>,<span class="number">78</span>,<span class="number">65</span>,<span class="number">43</span>,<span class="number">76</span></span><br><span class="line">y=<span class="built_in">reshape</span>(x,<span class="number">3</span>,<span class="number">4</span></span><br><span class="line">y =</span><br><span class="line">    <span class="number">23</span>    <span class="number">34</span>    <span class="number">98</span>    <span class="number">65</span></span><br><span class="line">    <span class="number">45</span>    <span class="number">65</span>    <span class="number">45</span>    <span class="number">43</span></span><br><span class="line">    <span class="number">65</span>    <span class="number">34</span>    <span class="number">78</span>    <span class="number">76</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>reshape函数只是改变原矩阵的行数和列数，即改变其逻辑结构，但并不改变原矩阵元素个数及其存储顺序。<br>A(:)将矩阵A的每一列元素堆叠起来，成为一个列向量，从而改变了矩阵的形状。</p></blockquote><h3 id="2-3-变量及其操作"><a href="#2-3-变量及其操作" class="headerlink" title="2.3  变量及其操作"></a>2.3  变量及其操作</h3><h4 id="2-3-1-变量与赋值语句"><a href="#2-3-1-变量与赋值语句" class="headerlink" title="2.3.1  变量与赋值语句"></a>2.3.1  变量与赋值语句</h4><h5 id="1．变量命名"><a href="#1．变量命名" class="headerlink" title="1．变量命名"></a>1．变量命名</h5><p>在MATLAB 7.0中，<strong>变量名是以字母开头，后接字母、数字或下划线的字符序列，最多63个字符。</strong>在MATLAB中，变量名区分字母的大小写。</p><h5 id="2．赋值语句"><a href="#2．赋值语句" class="headerlink" title="2．赋值语句"></a>2．赋值语句</h5><blockquote><p>(1) 变量=表达式 </p><p>(2) 表达式</p></blockquote><p>其中表达式是用运算符将有关运算量连接起来的式子，其结果是一个矩阵。</p><p>例如：计算表达式的值，并显示计算结果</p><img src="https://gitee.com/peng_xiang_li/Blogimage/raw/master/Matlab2/6.png" style="zoom:33%;" /><p>在MATLAB命令窗口输入命令：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; x=<span class="built_in">sqrt</span>(<span class="number">7</span>)<span class="number">-2</span><span class="built_in">i</span>;</span><br><span class="line">y=<span class="built_in">exp</span>(<span class="built_in">pi</span>/<span class="number">2</span>);</span><br><span class="line">z=(<span class="number">5</span>+<span class="built_in">cos</span>(<span class="number">47</span>*<span class="built_in">pi</span>/<span class="number">180</span>))/(<span class="number">1</span>+<span class="built_in">abs</span>(x-y))</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/peng_xiang_li/Blogimage/raw/master/Matlab2/7.png"></p><h4 id="2-3-2预定义变量"><a href="#2-3-2预定义变量" class="headerlink" title="2.3.2预定义变量"></a>2.3.2预定义变量</h4><p> 在MATLAB工作空间中，还驻留几个由系统本身定义的变量。例如，用pi表示圆周率π的近似值，用i，j表示虚数单位。</p><p><strong>预定义变量有特定的含义，在使用时，应尽量避免对这些变量重新赋值。</strong></p><h4 id="2-3-3-变量的管理"><a href="#2-3-3-变量的管理" class="headerlink" title="2.3.3  变量的管理"></a>2.3.3  变量的管理</h4><h5 id="1．内存变量的删除与修改"><a href="#1．内存变量的删除与修改" class="headerlink" title="1．内存变量的删除与修改"></a>1．内存变量的删除与修改</h5><p>MATLAB工作区窗口专门用于内存变量的管理。在工作区窗口中可以显示所有内存变量的属性。</p><p>who和whos这两个命令用于显示在MATLAB工作空间中已经驻留的变量名清单。</p><blockquote><p>who命令只显示出驻留变量的名称；</p><p>whos在给出变量名的同时，还给出它们的大小、所占字节数及数据类型等信息。 </p></blockquote><p><img src="https://gitee.com/peng_xiang_li/Blogimage/raw/master/Matlab2/8.png"></p><blockquote><p>clear命令用于删除MATLAB工作空间中的变量。</p></blockquote><p>2．内存变量文件利用MAT文件可以把当前MATLAB工作空间中的一些有用变量长久地保留下来，扩展名是.mat。MAT文件的生成和装入由save和load命令来完成。常用格式为：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">save 文件名 [变量名表]  [-append] [-ascii]</span><br><span class="line">load 文件名  [变量名表]  [-ascii]</span><br></pre></td></tr></table></figure><p>其中，文件名可以带路径，但不需带扩展名.mat，命令隐含一定对.mat文件进行操作。变量名表中的变量个数不限，只要内存或文件中存在即可，变量名之间以空格分隔。当变量名表省略时，保存或装入全部变量。-ascii选项使文件以ASCII格式处理，省略该选项时文件将以二进制格式处理。save命令中的-append选项控制将变量追加到MAT文件中。</p><h3 id="2-4-MATLAB常用内部函数"><a href="#2-4-MATLAB常用内部函数" class="headerlink" title="2.4  MATLAB常用内部函数"></a>2.4  MATLAB常用内部函数</h3><h4 id="2-4-1-常用数学函数"><a href="#2-4-1-常用数学函数" class="headerlink" title="2.4.1  常用数学函数"></a>2.4.1  常用数学函数</h4><p>MATLAB提供了许多数学函数，函数的自变量规定为矩阵变量，运算法则是将函数逐项作用于矩阵的元素上，因而运算的结果是一个与自变量同维数的矩阵。</p><p><img src="https://gitee.com/peng_xiang_li/Blogimage/raw/master/Matlab2/9.png"></p><h4 id="2-4-2-矩阵的超越函数"><a href="#2-4-2-矩阵的超越函数" class="headerlink" title="2.4.2  矩阵的超越函数"></a>2.4.2  矩阵的超越函数</h4><p>MATLAB还提供了一些直接作用于矩阵的超越函数，这些函数名都在上述内部函数名之后缀以m，并规定输入参数A必须是方阵。</p><h5 id="1．矩阵平方根"><a href="#1．矩阵平方根" class="headerlink" title="1．矩阵平方根"></a>1．矩阵平方根</h5><p>sqrtm(A)计算矩阵A的平方根。</p><p><img src="https://gitee.com/peng_xiang_li/Blogimage/raw/master/Matlab2/10.png"></p><h5 id="2．矩阵对数"><a href="#2．矩阵对数" class="headerlink" title="2．矩阵对数"></a>2．矩阵对数</h5><p>logm(A)计算矩阵A的自然对数。此函数输入参数的条件与输出结果间的关系和函数sqrtm(A)完全一样。</p><p><img src="https://gitee.com/peng_xiang_li/Blogimage/raw/master/Matlab2/11.png"></p><h5 id="3．矩阵指数"><a href="#3．矩阵指数" class="headerlink" title="3．矩阵指数"></a>3．矩阵指数</h5><p>expm(A)的功能都是求矩阵指数eA。例如，对上面计算所得到的A的自然对数b.</p><p><img src="https://gitee.com/peng_xiang_li/Blogimage/raw/master/Matlab2/12.png"></p><h5 id="4．普通矩阵函数"><a href="#4．普通矩阵函数" class="headerlink" title="4．普通矩阵函数"></a>4．普通矩阵函数</h5><p>funm(A,@fun)对方阵A计算由fun定义的函数的矩阵函数值。例如，当fun取exp时，funm(A,@exp)可以计算矩阵A的指数，与expm(A)的计算结果一样。</p><p><img src="https://gitee.com/peng_xiang_li/Blogimage/raw/master/Matlab2/13.png"></p><h3 id="2-5-MATLAB运算"><a href="#2-5-MATLAB运算" class="headerlink" title="2.5 MATLAB运算"></a>2.5 MATLAB运算</h3><h4 id="2-5-1-算术运算"><a href="#2-5-1-算术运算" class="headerlink" title="2.5.1  算术运算"></a>2.5.1  算术运算</h4><h5 id="1．基本算术运算"><a href="#1．基本算术运算" class="headerlink" title="1．基本算术运算"></a>1．基本算术运算</h5><p>MATLAB的基本算术运算有：＋(加)、－(减)、*(乘)、/(右除)、(左除)、^(乘方)。</p><p>注意，运算是在矩阵意义下进行的，单个数据的算术运算只是一种特例。</p><p> (1) 矩阵加减运算</p><blockquote><p>假定有两个矩阵A和B，则可以由A+B和A-B实现矩阵的加减运算。运算规则是：若A和B矩阵的维数相同，则可以执行矩阵的加减运算，A和B矩阵的相应元素相加减。如果A与B的维数不相同，则MATLAB将给出错误信息，提示用户两个矩阵的维数不匹配。</p></blockquote><p>(2) 矩阵乘法</p><blockquote><p>假定有两个矩阵A和B，若A为m×n矩阵，B为n×p矩阵，则C=A*B为m×p矩阵。</p></blockquote><p>(3) 矩阵除法</p><blockquote><p>在MATLAB中，有两种矩阵除法运算：\和/，分别表示左除和右除。</p><p>如果A矩阵是非奇异方阵，则A\B和B/A运算可以实现。</p><blockquote><p>A\B等效于A的逆左乘B矩阵，也就是inv(A) *B，</p><p>而B/A等效于A矩阵的逆右乘B矩阵，也就是B*inv(A)。</p></blockquote></blockquote><p><img src="https://gitee.com/peng_xiang_li/Blogimage/raw/master/Matlab2/14.png"></p><p>  (4) 矩阵的乘方</p><p>一个矩阵的乘方运算可以表示成A^x，要求A为方阵，x为标量。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A^<span class="number">2</span> = A*A</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/peng_xiang_li/Blogimage/raw/master/Matlab2/15.png"></p><h5 id="2．点运算"><a href="#2．点运算" class="headerlink" title="2．点运算"></a>2．点运算</h5><p>在MATLAB中，有一种特殊的运算，因为其运算符是在有关算术运算符前面加点，所以叫点运算。点运算符有.*、./、.\和.^。两矩阵进行点运算是指它们的对应元素进行相关运算，要求两矩阵的维参数相同。</p><h4 id="2-5-2-关系运算"><a href="#2-5-2-关系运算" class="headerlink" title="2.5.2  关系运算"></a>2.5.2  关系运算</h4><blockquote><p> MATLAB提供了6种关系运算符：</p><p> &lt;(小于)、&lt;=(小于或等于)、&gt;(大于)、&gt;=(大于或等于)、==(等于)、～=(不等于)。<br> 它们的含义不难理解，但要注意其书写方法与数学中的不等式符号不尽相同。</p></blockquote><p>关系运算符的运算法则为：</p><blockquote><p> (1) 当两个比较量是标量时，直接比较两数的大小。若关系成立，关系表达式结果为1，否则为0。</p><p> (2) 当参与比较的量是两个维数相同的矩阵时，比较是对两矩阵相同位置的元素按标量关系运算规则逐个进行，并给出元素比较结果。最终的关系运算的结果是一个维数与原矩阵相同的矩阵，它的元素由0或1组成。</p><p> (3) 当参与比较的一个是标量，而另一个是矩阵时，则把标量与矩阵的每一个元素按标量关系运算规则逐个比较，并给出元素比较结果。最终的关系运算的结果是一个维数与原矩阵相同的矩阵，它的元素由0或1组成。</p></blockquote><p>   例如：</p><p>建立5阶方阵A，判断A的元素是否能被3整除</p><p><img src="https://gitee.com/peng_xiang_li/Blogimage/raw/master/Matlab2/16.png"></p><blockquote><p>其中，rem(A,3)是矩阵A的每个元素除以3的余数矩阵。此时，0被扩展为与A同维数的零矩阵，P是进行等于(==)比较的结果矩阵。</p></blockquote><h4 id="2-5-3-逻辑运算"><a href="#2-5-3-逻辑运算" class="headerlink" title="2.5.3  逻辑运算"></a>2.5.3  逻辑运算</h4><p> MATLAB提供了3种逻辑运算符：&amp;(与)、|(或)和～(非)。</p><p>逻辑运算的运算法则为：</p><blockquote><p>(1) 在逻辑运算中，确认非零元素为真，用1表示，零元素为假，用0表示。</p><p>(2) 设参与逻辑运算的是两个标量a和b，</p><p>那么，a&amp;b  a,b全为非零时，运算结果为1，否则为0。</p><p>a|b  a,b中只要有一个非零，运算结果为1。</p><p>～a  当a是零时，运算结果为1；当a非零时，运算结果为0。</p><p>(3) 若参与逻辑运算的是两个同维矩阵，那么运算将对矩阵相同位置上的元素按标量规则逐个进行。最终运算结果是一个与原矩阵同维的矩阵，其元素由1或0组成。</p><p>(4) 若参与逻辑运算的一个是标量，一个是矩阵，那么运算将在标量与矩阵中的每个元素之间按标量规则逐个进行。最终运算结果是一个与矩阵同维的矩阵，其元素由1或0组成。</p><p>(5) 逻辑非是单目运算符，也服从矩阵运算规则。</p><p>(6) 在算术、关系、逻辑运算中，算术运算优先级最高，逻辑运算优先级最低。</p></blockquote><h3 id="2-6-字符串"><a href="#2-6-字符串" class="headerlink" title="2.6  字符串"></a>2.6  字符串</h3><p>在MATLAB中，字符串是用单撇号括起来的字符序列。</p><p>MATLAB将字符串当作一个行向量，每个元素对应一个字符，其标识方法和数值向量相同。也可以建立多行字符串矩阵。</p><h5 id="2-6-1-字符串的表示"><a href="#2-6-1-字符串的表示" class="headerlink" title="2.6.1  字符串的表示"></a>2.6.1  字符串的表示</h5><p>在MATLAB中，字符串是用单引号括起来的字符序列。例如：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xm=<span class="string">&#x27;Central South University&#x27;</span></span><br></pre></td></tr></table></figure><p>例：建立一个字符串向量，然后对该向量做如下处理：</p><blockquote><p>(1) 取第1～5个字符组成的子字符串。</p><p>(2) 将字符串倒过来重新排列。</p><p>(3) 将字符串中的小写字母变成相应的大写字母，其余字符不变。</p><p>(4) 统计字符串中小写字母的个数。</p></blockquote><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ch=<span class="string">&#x27;ABc123d4e56Fg9&#x27;</span>;</span><br><span class="line">subch=ch(<span class="number">1</span>:<span class="number">5</span>)           <span class="comment">%取子字符串</span></span><br><span class="line">revch=ch(<span class="keyword">end</span>:<span class="number">-1</span>:<span class="number">1</span>)       <span class="comment">%将字符串倒排</span></span><br><span class="line">k=<span class="built_in">find</span>(ch&gt;=<span class="string">&#x27;a&#x27;</span>&amp;ch&lt;=<span class="string">&#x27;z&#x27;</span>);     <span class="comment">%找小写字母的位置</span></span><br><span class="line">ch(k)=ch(k)-(<span class="string">&#x27;a&#x27;</span>-<span class="string">&#x27;A&#x27;</span>);         <span class="comment">%将小写字母变成相应的大写字母</span></span><br><span class="line">char(ch)                </span><br><span class="line"><span class="built_in">length</span>(k)                  <span class="comment">%统计小写字母的个数</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>注意是英文下的单撇号；’ABc123d4e56Fg9’，不是‘ABc123d4e56Fg9’</p></blockquote><h5 id="2-6-2-字符串的操作"><a href="#2-6-2-字符串的操作" class="headerlink" title="2.6.2  字符串的操作"></a>2.6.2  字符串的操作</h5><p>1．字符串的执行<br>与字符串有关的一个重要函数是eval，它的作用是把字符串的内容作为对应的MATLAB命令来执行，其调用格式为：<br>eval(s)<br>其中s为字符串。例如：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; t=<span class="built_in">pi</span>;</span><br><span class="line">m=<span class="string">&#x27;[t,sin(t),cos(t)]&#x27;</span>;</span><br><span class="line">y=eval(m)</span><br><span class="line">y =</span><br><span class="line">    <span class="number">3.1416</span>    <span class="number">0.0000</span>   <span class="number">-1.0000</span></span><br></pre></td></tr></table></figure><p>2．字符串与数值之间的转换<br>字符串是以ASCII码形式存储的，abs和double函数都可以用来获取字符串矩阵所对应的ASCII码数值矩阵。</p><p>3．字符串的连接<br>在MATLAB中，要将两个字符串连接在一起，有两种常见方法：一是用字符串向量，二是用strcat函数。</p><p>4．字符串的比较<br>字符串的比较有两种方法：<strong>利用关系运算符</strong>或<strong>字符串比较函数</strong>。<br>当两个字符串拥有相同的长度时，可以利用关系运算符对字符串进行比较，比较的规则是按ASCII值大小逐个字符进行比较，比较的结果是一个数值向量，其元素为对应字符比较的结果。例如：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; <span class="string">&#x27;www0&#x27;</span>&gt;=<span class="string">&#x27;W123&#x27;</span></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line">     <span class="number">1</span>     <span class="number">1</span>     <span class="number">1</span>     <span class="number">0</span></span><br></pre></td></tr></table></figure><p>字符串比较函数用于判断字符串是否相等，有4种比较方式，函数如下：</p><blockquote><p>① strcmp(s1,s2)：用来比较字符串s1和s2是否相等，如果相等，返回1，否则返回0。<br>② strncmp(s1,s2,n)：用来比较前n个字符是否相等，如果相等，返回1，否则返回0。<br>③ strcmpi(s1,s2)：在忽略字母大小写前提下，比较字符串s1和s2是否相等，如果相等，返回1，否则返回0。<br>④ strncmpi(s1,s2,n)：在忽略字符串大小写前提下，比较前n个字符是否相等，如果相等，返回1，否则返回0。</p></blockquote><h3 id="2-7-结构数据和单元数据"><a href="#2-7-结构数据和单元数据" class="headerlink" title="2.7  结构数据和单元数据"></a>2.7  结构数据和单元数据</h3><h5 id="2-7-1-结构数据"><a href="#2-7-1-结构数据" class="headerlink" title="2.7.1  结构数据"></a>2.7.1  结构数据</h5><p>1．结构矩阵的建立与引用</p><p>建立一个结构矩阵可采用给结构成员赋值的办法。</p><p>具体格式为：</p><blockquote><p>结构矩阵名.成员名=表达式</p><p>其中表达式应理解为矩阵表达式。</p></blockquote><p>2．结构成员的修改</p><p>可以根据需要增加或删除结构的成员。</p><p>例如要给结构矩阵a增加一个成员x4，可给a中任意一个元素增加成员x4：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a(<span class="number">1</span>).x4=‘<span class="number">410075</span>’;</span><br></pre></td></tr></table></figure><p>但其他成员均为空矩阵，可以使用赋值语句给它赋确定的值。</p><p>要删除结构的成员，则可以使用rmfield函数来完成。</p><p>例如，删除成员x4：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a=rmfield(a,‘x4’);</span><br></pre></td></tr></table></figure><h5 id="2-7-2-单元数据"><a href="#2-7-2-单元数据" class="headerlink" title="2.7.2  单元数据"></a>2.7.2  单元数据</h5><p>建立单元矩阵和一般矩阵相似，只是矩阵元素用大括号括起来。</p><p>可以用带有大括号下标的形式引用单元矩阵元素。例如b{3,3}。单元矩阵的元素可以是结构或单元数据。</p><p>可以使用celldisp函数来显示整个单元矩阵，如celldisp(b)。</p>]]></content>
      
      
      <categories>
          
          <category> MATLAB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MATLAB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROS学习笔记</title>
      <link href="/2021/11/08/ROS/ROS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/11/08/ROS/ROS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="ROS学习笔记"><a href="#ROS学习笔记" class="headerlink" title="ROS学习笔记"></a><strong>ROS学习笔记</strong></h1><p><img src="https://gitee.com/peng_xiang_li/Blogimage/raw/master/ROS/20211108225541.png"></p><blockquote><p><strong>声明：</strong><br>本文是我在学习ROS课程中总结的笔记；便于日后的巩固和复习。<br>参考资料：<br><a href="https://www.bilibili.com/video/BV1Ci4y1L7ZZ?from=search&seid=4582636687628255908&spm_id_from=333.337.0.0">【奥特学园】《ROS理论与实践》</a><br> <a href="http://wiki.ros.org/ROS/Tutorials/">ROS Wiki</a></p></blockquote><h2 id="一、Ubuntu下ROS-的安装和测试"><a href="#一、Ubuntu下ROS-的安装和测试" class="headerlink" title="一、Ubuntu下ROS 的安装和测试"></a><strong>一、Ubuntu下ROS 的安装和测试</strong></h2><h4 id="1-1、在Ubuntu下选择合适的ROS版本"><a href="#1-1、在Ubuntu下选择合适的ROS版本" class="headerlink" title="1.1、在Ubuntu下选择合适的ROS版本"></a><strong>1.1、在Ubuntu下选择合适的ROS版本</strong></h4><p><img src="https://gitee.com/peng_xiang_li/Blogimage/raw/master/ROS/20211108225548.png"></p><p>根据自己的Ubuntu坏境选择ROS版本，建议安装最新版本。</p><h4 id="1-2、配置ubuntu的软件和更新"><a href="#1-2、配置ubuntu的软件和更新" class="headerlink" title="1.2、配置ubuntu的软件和更新"></a><strong>1.2、配置ubuntu的软件和更新</strong></h4><p>配置ubuntu的软件和更新，允许安装不经认证的软件。</p><p>首先打开“软件和更新”对话框，具体可以在 Ubuntu 搜索按钮中搜索。</p><p>打开后按照下图进行配置（确保勾选了”restricted”， “universe，” 和 “multiverse.”）</p><p><img src="https://gitee.com/peng_xiang_li/Blogimage/raw/master/ROS/20211108225554.png"></p><h4 id="1-3、设置安装源"><a href="#1-3、设置安装源" class="headerlink" title="1.3、设置安装源"></a><strong>1.3、设置安装源</strong></h4><p>官方默认安装源:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sh -c &#x27;echo &quot;deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#x27;</span><br></pre></td></tr></table></figure><p>或来自国内清华的安装源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sh -c &#x27;. /etc/lsb-release &amp;&amp; echo &quot;deb http://mirrors.tuna.tsinghua.edu.cn/ros/ubuntu/ `lsb_release -cs` main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#x27;</span><br></pre></td></tr></table></figure><p>或来自国内中科大的安装源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sh -c &#x27;. /etc/lsb-release &amp;&amp; echo &quot;deb http://m</span><br></pre></td></tr></table></figure><p><strong>尽量使用国内安装源，安装的数度会快一些</strong></p><h4 id="1-4、设置key"><a href="#1-4、设置key" class="headerlink" title="1.4、设置key"></a><strong>1.4、设置key</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-key adv --keyserver &#x27;hkp://keyserver.ubuntu</span><br></pre></td></tr></table></figure><p>若无法连接到密钥服务器，可以尝试替换上面命令中的 <code>hkp://keyserver.ubuntu.com:80</code> 为 <code>hkp://pgp.mit.edu:80</code> 。 </p><p>也可以使用curl命令替换apt-key命令，这在使用代理服务器的情况下比较有用： </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL &#x27;http://keyserver.ubuntu.com/pks/lookup?op=get&amp;search=0xC1CF6E31E6BADE8868B172B4F42ED6FBAB17C654&#x27; | sudo apt-key add -</span><br></pre></td></tr></table></figure><h4 id="1-5、安装ROS"><a href="#1-5、安装ROS" class="headerlink" title="1.5、安装ROS"></a><strong>1.5、安装ROS</strong></h4><p>①、使用以下命令，确保Ubuntu软件包索引是最新的： </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><p>②、安装完整桌面版的ROS，完整版包含了 ROS、<a href="http://wiki.ros.org/rqt">rqt</a>、<a href="http://wiki.ros.org/rviz">rviz</a>、机器人通用库、2D/3D 模拟器、导航以及 2D/3D 感知包。</p><p><strong>Ubuntu16.04下安装ROS Kinetic Kame 命令：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ros-kinetic-desktop-full</span><br></pre></td></tr></table></figure><p><strong>Ubuntu18.04下安装ROS Melodic 命令：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ros-melodic-desktop-full</span><br></pre></td></tr></table></figure><p><strong>Ubuntu20.04下安装ROS Noetic 命令：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ros-noetic-desktop-full</span><br></pre></td></tr></table></figure><p>出现错误</p><p><img src="https://gitee.com/peng_xiang_li/Blogimage/raw/master/ROS/20211108225602.png"></p><p>重复多次安装一下，可能是因为网络的原因。</p><h4 id="1-6、配置ROS坏境"><a href="#1-6、配置ROS坏境" class="headerlink" title="1.6、配置ROS坏境"></a><strong>1.6、配置ROS坏境</strong></h4><p>配置环境变量，方便在任意 终端中使用 ROS。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;source /opt/ros/noetic/setup.bash&quot; &gt;&gt; ~/.bashrc</span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><h4 id="1-7、ROS卸载"><a href="#1-7、ROS卸载" class="headerlink" title="1.7、ROS卸载"></a><strong>1.7、ROS卸载</strong></h4><p>如果需要卸载ROS可以调用如下命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt remove ros-noetic-*</span><br></pre></td></tr></table></figure><h4 id="1-8、初始化-rosdep"><a href="#1-8、初始化-rosdep" class="headerlink" title="1.8、初始化 rosdep"></a><strong>1.8、初始化 rosdep</strong></h4><p>在使用 ROS 之前，需要初始化 <code>rosdep</code>。<code>rosdep</code> 能够轻松地安装被想要编译的源代码，或被某些 ROS 核心组件需要的系统依赖。</p><p>避免后面出现sudo rosdep：找不到命令提示，需要执行如下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python3-rosdep</span><br></pre></td></tr></table></figure><p> 初始化rosdep</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo rosdep init</span><br><span class="line">rosdep update</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/peng_xiang_li/Blogimage/raw/master/ROS/20211108225608.png"></p><p>但是，在 rosdep 初始化时，多半会抛出异常。</p><p><strong>问题:</strong></p><p><img src="https://gitee.com/peng_xiang_li/Blogimage/raw/master/ROS/20211108225615.png"></p><p><strong>原因:</strong></p><p>境外资源被屏蔽。</p><p><strong>解决:</strong></p><p>百度或google搜索，解决方式有多种(<a href="https://github.com/ros/rosdistro/issues/9721)%EF%BC%8C%E5%8F%AF%E6%83%9C%E5%9C%A8">https://github.com/ros/rosdistro/issues/9721)，可惜在</a> ubuntu20.04 下，集体失效。</p><p>新思路:<em>将相关资源备份到 gitee,修改 rosdep 源码,重新定位资源。</em></p><p><strong>实现:</strong></p><p>1.先打开资源备份路径:<a href="https://gitee.com/zhao-xuzuo/rosdistro%EF%BC%8C%E6%89%93%E5%BC%80">https://gitee.com/zhao-xuzuo/rosdistro，打开</a> rosdistro/<strong>rosdep</strong>/<strong>sources.list.d</strong>/<strong>20-default.list</strong>文件留作备用(主要是复用URL的部分内容:gitee.com/zhao-xuzuo/rosdistro/raw/master)。</p><p><img src="https://gitee.com/peng_xiang_li/Blogimage/raw/master/ROS/20211108225620.png"></p><p>2.进入”/usr/lib/python3/dist-packages/“ 查找rosdep中和<code>raw.githubusercontent.com</code>相关的内容，调用命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -type f | xargs grep &quot;raw.githubusercontent&quot;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/peng_xiang_li/Blogimage/raw/master/ROS/20211108225625.png"></p><p>3.修改相关文件，主要有: ./rosdistro/<strong>init</strong>.py、./rosdep2/gbpdistro_support.py、./rosdep2/sources_list.py 、./rosdep2/rep3.py。可以使用<code>sudo gedit</code>命令修改文件:</p><p>文件中涉及的 URL 内容，如果是:<code>raw.githubusercontent.com/ros/rosdistro/master</code>都替换成步骤1中准备的<code>gitee.com/zhao-xuzuo/rosdistro/raw/master</code>即可。</p><p>修改完毕，再重新执行命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo rosdep init</span><br><span class="line">rosdep update</span><br></pre></td></tr></table></figure><p>就可以正常实现 rosdep 的初始化与更新了。</p><h4 id="1-9、测试-ROS——运行小海龟"><a href="#1-9、测试-ROS——运行小海龟" class="headerlink" title="1.9、测试 ROS——运行小海龟"></a><strong>1.9、测试 ROS——运行小海龟</strong></h4><ol><li><p>首先启动三个终端(ctrl + alt + T)</p></li><li><p>第一个终端运行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roscore</span><br></pre></td></tr></table></figure></li><li><p>第二个终端运行命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun turtlesim turtlesim_node</span><br></pre></td></tr></table></figure><p>此时会弹出图形化界面</p></li><li><p>第三个终端运行命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun turtlesim turtle_teleop_key</span><br></pre></td></tr></table></figure><p>在3中可以通过上下左右控制2中乌龟的运动</p></li></ol><p><img src="https://gitee.com/peng_xiang_li/Blogimage/raw/master/ROS/20211108225632.png"></p><p><strong>注：</strong></p><p>有时候下载任务不小心被 CTRL+Z暂停了</p><p>使用： jobs 命令查看已有进程 使用fg %x恢复执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fg %x</span><br></pre></td></tr></table></figure><p> 参考文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://blog.csdn.net/qq_44830040/article/details/106049992</span><br><span class="line">https://blog.csdn.net/weixin_43159148/article/details/83375218</span><br></pre></td></tr></table></figure><h2 id="二、ROS开发常用软件"><a href="#二、ROS开发常用软件" class="headerlink" title="二、ROS开发常用软件"></a><strong>二、ROS开发常用软件</strong></h2><h4 id="2-1、Terminator"><a href="#2-1、Terminator" class="headerlink" title="2.1、Terminator"></a><strong>2.1、Terminator</strong></h4><h5 id="安装命令："><a href="#安装命令：" class="headerlink" title="安装命令："></a>安装命令：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install terminator</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/peng_xiang_li/Blogimage/raw/master/ROS/20211108225637.png"></p><p>在Ubuntu中搜索添加到桌面</p><p><img src="https://gitee.com/peng_xiang_li/Blogimage/raw/master/ROS/20211108225641.png"></p><p><img src="https://gitee.com/peng_xiang_li/Blogimage/raw/master/ROS/20211108225646.png"></p><h5 id="Terminator-软件常用快捷键"><a href="#Terminator-软件常用快捷键" class="headerlink" title="Terminator 软件常用快捷键"></a>Terminator 软件常用快捷键</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">在同一个标签内的操作：</span><br><span class="line">Ctrl+Shift+O                    //水平分割终端</span><br><span class="line">Ctrl+Shift+E                    //垂直分割终端</span><br><span class="line">Alt+Up                          //移动到上面的终端</span><br><span class="line">Alt+Down                        //移动到下面的终端</span><br><span class="line">Alt+Left                        //移动到左边的终端</span><br><span class="line">Alt+Right                       //移动到右边的终端</span><br><span class="line">Ctrl+Shift+W                    //关闭当前终端</span><br><span class="line">Ctrl+Shift+Q                    //退出当前窗口，当前窗口的所有终端都将被关闭</span><br><span class="line">Ctrl+Shift+X                    //最大化显示当前终端</span><br><span class="line">Ctrl+Shift+Z                    //最大化显示当前终端并使字体放大</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">各个标签之间的操作：</span><br><span class="line">F11                             //全屏开关</span><br><span class="line">Ctrl+Shift+T                    //打开一个新的标签</span><br><span class="line">Ctrl+PageDown                   //移动到下一个标签</span><br><span class="line">Ctrl+PageUp                     //移动到上一个标签</span><br><span class="line">Ctrl+Shift+PageDown             //将当前标签与其后一个标签交换位置</span><br><span class="line">Ctrl+Shift+PageUp               //将当前标签与其前一个标签交换位置</span><br><span class="line">Ctrl+Plus (+)                   //增大字体</span><br><span class="line">Ctrl+Minus (-)                  //减小字体</span><br><span class="line">Ctrl+Zero (0)                   //恢复字体到原始大小</span><br><span class="line">Ctrl+Shift+R                    //重置终端状态</span><br><span class="line">Ctrl+Shift+G                    //重置终端状态并clear屏幕</span><br><span class="line">Super+g                         //绑定所有的终端，以便向一个输入能够输入到所有的终端</span><br><span class="line">Super+Shift+G                   //解除绑定</span><br><span class="line">Super+t                         //绑定当前标签的所有终端，向一个终端输入的内容会自动输入到其他终端</span><br><span class="line">Super+Shift+T                   //解除绑定</span><br><span class="line">Ctrl+Shift+I                    //打开一个窗口，新窗口与原来的窗口使用同一个进程</span><br><span class="line">Super+i                         //打开一个新窗口，新窗口与原来的窗口使用不同的进程</span><br></pre></td></tr></table></figure><h4 id="2-2、VSCode"><a href="#2-2、VSCode" class="headerlink" title="2.2、VSCode"></a><strong>2.2、VSCode</strong></h4><h4 id="2-2-1、vscode下ROS使用基本流程"><a href="#2-2-1、vscode下ROS使用基本流程" class="headerlink" title="2.2.1、vscode下ROS使用基本流程"></a>2.2.1、vscode下ROS使用基本流程</h4><h5 id="1-创建-ROS-工作空间"><a href="#1-创建-ROS-工作空间" class="headerlink" title="1.创建 ROS 工作空间"></a>1.创建 ROS 工作空间</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p xxx_ws/src(必须得有 src)</span><br><span class="line">cd xxx_ws</span><br><span class="line">catkin_make</span><br></pre></td></tr></table></figure><h5 id="2-启动-vscode"><a href="#2-启动-vscode" class="headerlink" title="2 启动 vscode"></a>2 启动 vscode</h5><p>进入 xxx_ws 启动 vscode</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd xxx_ws</span><br><span class="line">code .</span><br></pre></td></tr></table></figure><h5 id="3-vscode-中编译-ros"><a href="#3-vscode-中编译-ros" class="headerlink" title="3 vscode 中编译 ros"></a>3 vscode 中编译 ros</h5><p>快捷键 ctrl + shift + B 调用编译，选择:<code>catkin_make:build</code></p><p>可以点击配置设置为默认，修改.vscode/tasks.json 文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="comment">// 有关 tasks.json 格式的文档，请参见</span></span><br><span class="line">    <span class="comment">// https://go.microsoft.com/fwlink/?LinkId=733558</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;2.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;tasks&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;label&quot;</span>: <span class="string">&quot;catkin_make:debug&quot;</span>, <span class="comment">//代表提示的描述性信息</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;shell&quot;</span>,  <span class="comment">//可以选择shell或者process,如果是shell代码是在shell里面运行一个命令，如果是process代表作为一个进程来运行</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;catkin_make&quot;</span>,<span class="comment">//这个是我们需要运行的命令</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span>: [],<span class="comment">//如果需要在命令后面加一些后缀，可以写在这里，比如-DCATKIN_WHITELIST_PACKAGES=“pac1;pac2”</span></span><br><span class="line">            <span class="attr">&quot;group&quot;</span>: &#123;<span class="attr">&quot;kind&quot;</span>:<span class="string">&quot;build&quot;</span>,<span class="attr">&quot;isDefault&quot;</span>:<span class="literal">true</span>&#125;,</span><br><span class="line">            <span class="attr">&quot;presentation&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;reveal&quot;</span>: <span class="string">&quot;always&quot;</span><span class="comment">//可选always或者silence，代表是否输出信息</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;problemMatcher&quot;</span>: <span class="string">&quot;$msCompile&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-创建-ROS-功能包"><a href="#4-创建-ROS-功能包" class="headerlink" title="4 .创建 ROS 功能包"></a>4 .创建 ROS 功能包</h5><p>选定 src 右击 —&gt; create catkin package</p><p><strong>设置包名 添加依赖</strong></p><p><img src="https://gitee.com/peng_xiang_li/Blogimage/raw/master/ROS/20211108225656.png"></p><p><img src="https://gitee.com/peng_xiang_li/Blogimage/raw/master/ROS/20211108225701.png"></p><h5 id="5-C-实现"><a href="#5-C-实现" class="headerlink" title="5. C++ 实现"></a>5. C++ 实现</h5><p><strong>在功能包的 src 下新建 cpp 文件</strong></p><p><img src="https://gitee.com/peng_xiang_li/Blogimage/raw/master/ROS/20211108225705.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    控制台输出 HelloVSCode !!!</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ros/ros.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">setlocale</span>(LC_ALL,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="comment">//执行节点初始化</span></span><br><span class="line">    ros::<span class="built_in">init</span>(argc,argv,<span class="string">&quot;HelloVSCode&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出日志</span></span><br><span class="line">    <span class="built_in">ROS_INFO</span>(<span class="string">&quot;Hello VSCode!!!哈哈哈哈哈哈哈哈哈哈&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>安装包后编译无错误</p><p><img src="https://gitee.com/peng_xiang_li/Blogimage/raw/master/ROS/20211108225710.png"></p><h5 id="6-在src目录下修改CMakeList-txt"><a href="#6-在src目录下修改CMakeList-txt" class="headerlink" title="6.在src目录下修改CMakeList.txt"></a>6.在src目录下修改CMakeList.txt</h5><p>第136行修改为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">136</span>|<span class="built_in">add_executable</span>(hello_vscode_c src/hello_vscode_c.cpp)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/peng_xiang_li/Blogimage/raw/master/ROS/20211108225714.png"></p><p>149~151行修改为</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">149</span>| <span class="built_in">target_link_libraries</span>(hello_vscode_c</span><br><span class="line"><span class="number">150</span>|   $&#123;catkin_LIBRARIES&#125;</span><br><span class="line"><span class="number">151</span>| )</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/peng_xiang_li/Blogimage/raw/master/ROS/20211108225718.png"></p><h5 id="7-编译"><a href="#7-编译" class="headerlink" title="7.编译"></a>7.编译</h5><p>在vscode下新建终端</p><p><img src="https://gitee.com/peng_xiang_li/Blogimage/raw/master/ROS/20211108225705.png"></p><p><img src="https://gitee.com/peng_xiang_li/Blogimage/raw/master/ROS/20211108225726.png"></p><h2 id="三、ROS开发中常用的命令"><a href="#三、ROS开发中常用的命令" class="headerlink" title="三、ROS开发中常用的命令"></a><strong>三、ROS开发中常用的命令</strong></h2><h4 id="3-1、启动命令roscore"><a href="#3-1、启动命令roscore" class="headerlink" title="3.1、启动命令roscore"></a><strong>3.1、启动命令roscore</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roscore</span><br></pre></td></tr></table></figure><blockquote><p>必须运行 roscore 才能使 ROS 节点进行通信；</p><p>roscore 将启动:①、ros master；②、ros 参数服务器；③、rosout 日志节点</p></blockquote><h4 id="3-2、运行命令-rosrun"><a href="#3-2、运行命令-rosrun" class="headerlink" title="3.2、运行命令 rosrun"></a><strong>3.2、运行命令 rosrun</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun 包名 可执行文件名  //运行指定的ROS节点</span><br></pre></td></tr></table></figure><h4 id="3-3、创建新的ROS功能包"><a href="#3-3、创建新的ROS功能包" class="headerlink" title="3.3、创建新的ROS功能包"></a><strong>3.3、创建新的ROS功能包</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">catkin_create_pkg 自定义包名 依赖包</span><br></pre></td></tr></table></figure><h4 id="3-4、安装-ROS功能包"><a href="#3-4、安装-ROS功能包" class="headerlink" title="3.4、安装 ROS功能包"></a><strong>3.4、安装 ROS功能包</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install xxx</span><br></pre></td></tr></table></figure><h4 id="3-5、删除某个功能包"><a href="#3-5、删除某个功能包" class="headerlink" title="3.5、删除某个功能包"></a><strong>3.5、删除某个功能包</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt purge xxx</span><br></pre></td></tr></table></figure><h4 id="3-6、列出所有功能包"><a href="#3-6、列出所有功能包" class="headerlink" title="3.6、列出所有功能包"></a><strong>3.6、列出所有功能包</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rospack list</span><br></pre></td></tr></table></figure><h4 id="3-7、查找某个功能包是否存在"><a href="#3-7、查找某个功能包是否存在" class="headerlink" title="3.7、查找某个功能包是否存在"></a><strong>3.7、查找某个功能包是否存在</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rospack find xxx</span><br></pre></td></tr></table></figure><h4 id="3-8、搜索某个功能包"><a href="#3-8、搜索某个功能包" class="headerlink" title="3.8、搜索某个功能包"></a><strong>3.8、搜索某个功能包</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt search xxx</span><br></pre></td></tr></table></figure><h4 id="3-9、进入某个功能包"><a href="#3-9、进入某个功能包" class="headerlink" title="3.9、进入某个功能包"></a><strong>3.9、进入某个功能包</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roscd xxx</span><br></pre></td></tr></table></figure><h4 id="3-10、列出某个包下的文件"><a href="#3-10、列出某个包下的文件" class="headerlink" title="3.10、列出某个包下的文件"></a><strong>3.10、列出某个包下的文件</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosls xxx</span><br></pre></td></tr></table></figure><h4 id="3-11、修改某个功能包文件"><a href="#3-11、修改某个功能包文件" class="headerlink" title="3.11、修改某个功能包文件"></a><strong>3.11、修改某个功能包文件</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosed 包名 文件名</span><br></pre></td></tr></table></figure><h2 id="四、ROS下helloword测试"><a href="#四、ROS下helloword测试" class="headerlink" title="四、ROS下helloword测试"></a><strong>四、ROS下helloword测试</strong></h2><h4 id="4-1、HelloWorld-C-版"><a href="#4-1、HelloWorld-C-版" class="headerlink" title="4.1、HelloWorld(C++版)"></a><strong>4.1、HelloWorld(C++版)</strong></h4><h5 id="1-创建工作空间并初始化"><a href="#1-创建工作空间并初始化" class="headerlink" title="1.创建工作空间并初始化"></a>1.<strong>创建工作空间并初始化</strong></h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p 自定义空间名称/src</span><br><span class="line">cd 自定义空间名称</span><br><span class="line">catkin_make</span><br></pre></td></tr></table></figure><p>上述命令，首先会创建一个工作空间以及一个 src 子目录，然后再进入工作空间调用 catkin_make命令编译。</p><p><img src="https://gitee.com/peng_xiang_li/Blogimage/raw/master/ROS/20211108225751.png">typora-user-images\image-20211105083002255.png)</p><h5 id="2-进入-src-创建-ros-包并添加依赖"><a href="#2-进入-src-创建-ros-包并添加依赖" class="headerlink" title="2.进入 src 创建 ros 包并添加依赖"></a><strong>2.进入 src 创建 ros 包并添加依赖</strong></h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd src</span><br><span class="line">catkin_create_pkg 自定义ROS包名 roscpp rospy std_msgs</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/peng_xiang_li/Blogimage/raw/master/ROS/20211108225756.png"></p><p>上述命令，会在工作空间下生成一个功能包，该功能包依赖于 roscpp、rospy 与  std_msgs，其中roscpp是使用C++实现的库，而rospy则是使用python实现的库，std_msgs是标准消息库，创建ROS功能包时，一般都会依赖这三个库实现。</p><p><strong>注意:</strong>  在ROS中，虽然实现同一功能时，C++和Python可以互换，但是具体选择哪种语言，需要视需求而定，因为两种语言相较而言:C++运行效率高但是编码效率低，而Python则反之，基于二者互补的特点，ROS设计者分别设计了roscpp与rospy库，前者旨在成为ROS的高性能库，而后者则一般用于对性能无要求的场景，旨在提高开发效率。</p><p>注意要在自定义的包文件下的src文件下新建C++代码</p><p><img src="https://gitee.com/peng_xiang_li/Blogimage/raw/master/ROS/20211108225801.png"></p><p><img src="https://gitee.com/peng_xiang_li/Blogimage/raw/master/ROS/20211108225805.png"></p><p><img src="https://gitee.com/peng_xiang_li/Blogimage/raw/master/ROS/20211108225809.png"></p><h5 id="3-编辑-ros-包下的-Cmakelist-txt文件"><a href="#3-编辑-ros-包下的-Cmakelist-txt文件" class="headerlink" title="3.编辑 ros 包下的 Cmakelist.txt文件"></a><strong>3.编辑 ros 包下的 Cmakelist.txt文件</strong></h5><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">add_executable</span>(步骤<span class="number">3</span>的源文件名</span><br><span class="line">  src/步骤<span class="number">3</span>的源文件名.cpp</span><br><span class="line">)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(步骤<span class="number">3</span>的源文件名</span><br><span class="line">  <span class="variable">$&#123;catkin_LIBRARIES&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/peng_xiang_li/Blogimage/raw/master/ROS/20211108225814.png"></p><h5 id="5-进入工作空间目录并编译"><a href="#5-进入工作空间目录并编译" class="headerlink" title="5.进入工作空间目录并编译"></a><strong>5.进入工作空间目录并编译</strong></h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd 自定义空间名称</span><br><span class="line">catkin_make</span><br></pre></td></tr></table></figure><p>生成 build devel ….</p><p><img src="https://gitee.com/peng_xiang_li/Blogimage/raw/master/ROS/20211108225818.png"></p><h5 id="6-执行"><a href="#6-执行" class="headerlink" title="6.执行"></a><strong>6.执行</strong></h5><p><strong>先启动命令行1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roscore</span><br></pre></td></tr></table></figure><p><strong>再启动命令行2：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd 工作空间</span><br><span class="line">source ./devel/setup.bash</span><br><span class="line">rosrun 包名 C++节点</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/peng_xiang_li/Blogimage/raw/master/ROS/20211108225823.png"></p><p>命令行输出: HelloWorld!</p><h4 id="4-2、HelloWorld-python版"><a href="#4-2、HelloWorld-python版" class="headerlink" title="4.2、HelloWorld(python版)"></a><strong>4.2、HelloWorld(python版)</strong></h4>]]></content>
      
      
      <categories>
          
          <category> ROS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ROS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写博客的意义</title>
      <link href="/2021/11/08/hello_Blog/hello-world/"/>
      <url>/2021/11/08/hello_Blog/hello-world/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/peng_xiang_li/Blogimage/raw/master/CSDN_51che/src=http---www.mianfeiwendang.com-pic-19484a0c6efc11aab2a7cef732243488c7b81bc4-1-810-jpg_6-1080-0-0-1080.jpg&refer=http---www.mianfeiwendang.jpg"></p><blockquote><p>2021年11月7日创建了这个博客。</p></blockquote><blockquote><h3 id="搭建个人博客和写博客的意义："><a href="#搭建个人博客和写博客的意义：" class="headerlink" title="搭建个人博客和写博客的意义："></a>搭建个人博客和写博客的意义：</h3><p>①、便于以后对知识点的巩固复习；</p><p>②、建立起自己的知识清单；</p><p>③、记录学习中遇到的一些问题；</p><p>④、提高自己的写作能力；</p><p>⑤、为自己以后面试加分；</p><p>⑥、认识很多有意思的朋友；</p><p>⑦、提高阅读量，认识度。</p><p>⑧、在浩瀚无穷的网络世界留下属于我的足迹！</p></blockquote><p><img src="https://gitee.com/peng_xiang_li/Blogimage/raw/master/CSDN_51che/src=http---inews.gtimg.com-newsapp_match-0-5577924328-0.jpg&refer=http---inews.gtimg.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
